" dot-vimrc
"
" Author: Justin Too (doubleotoo@gmail.com)
"
" Creating key mappings: http://vim.wikia.com/wiki/Mapping_keys_in_Vim_-_Tutorial_(Part_1)
" Modes: http://en.wikibooks.org/wiki/Learning_the_vi_Editor/Vim/Modes
"
"     :nmap - Display normal mode maps
"     :imap - Display insert mode maps
"     :vmap - Display visual and select mode maps
"     :smap - Display select mode maps
"     :xmap - Display visual mode maps
"     :cmap - Display command-line mode maps
"     :omap - Display operator pending mode maps
"
" quickfix
"
"   :copen or :cw

call pathogen#infect()
call pathogen#helptags()

" File-type highlighting and configuration.
" Run :filetype (without args) to see what you may have
" to turn on yourself, or just set them all to be sure.
syntax on
filetype on
filetype plugin on
filetype indent on
"filetype indent plugin on
" 'intellisense'
set ofu=syntaxcomplete#Complete
set completeopt=longest,menuone

set modeline

autocmd FileType python set complete+=k~/.vim/syntax/python.vim isk+=.,(

set nocompatible

" allow backspacing over everything in insert mode
set backspace=indent,eol,start

" set expandtab
autocmd FileType * set tabstop=2|set shiftwidth=2|set expandtab
autocmd FileType make setlocal noexpandtab
autocmd FileType automake setlocal noexpandtab

" select when using the mouse
set selectmode=mouse

" keep 100 lines of command line history
set history=100

" show the cursor position all the time
"
" Now in the bottom right corner of the status line there will be something
" like: 529, 35 68%, representing line 529, column 35, about 68% of the way
" to the end of the buffer.
"
set ruler

" show (partial) commands
set showcmd

" 1. Use case-smart searching
" ------------------------------------------------------------------------------
"
" These two options, when set together, will make /-style searches
" case-sensitive only if there is a capital letter in the search
" expression. *-style searches continue to be consistently case-sensitive.
"
set ignorecase
set smartcase

" 2. Set the terminal title
" ------------------------------------------------------------------------------
"
" A running gvim will always have a window title, but when vim runs within
" an xterm, by default it inherits the terminal’s current title.
"
" This gives e.g. | page.html (~) - VIM |.
"
set title

" 3. Maintain more context around the cursor
" ------------------------------------------------------------------------------
"
" When the cursor moves outside the viewport of the current window,
" the buffer scrolls a single line to keep the cursor in view. Setting
" the option below will start the scrolling three lines before the border,
" keeping more context around where you’re working.
"
" Typing zz is also handy; it centers the window on the cursor without
" moving the cursor. (But watch out for ZZ, which does something entirely
" different!)
"
set scrolloff=5

" 4. Store temporary files in a central spot
" ------------------------------------------------------------------------------
"
" Swap files and backups are annoying but can save you a lot of trouble.
" Rather than spread them all around your filesystem, isolate them to a single
" directory:
"
"     $ mkdir ~/.vim-tmp  # or whatever
"
" This is especially valuable after an unexpected reboot — you don’t have to
" track down all the leftover temp files. However: if you are editing files on
" a shared file system, it’ll be easier to clobber concurrent modifications, as
" other users’ Vim processes won’t see your swaps.
"
set backupdir=~/.vim/tmp,~/.tmp,~/tmp,/var/tmp,/tmp
set directory=~/.vim/tmp,~/.tmp,~/tmp,/var/tmp,/tmp
"
" do not keep a backup files
"
set nobackup
set nowritebackup

" Set status line
set statusline=[%02n:%{fugitive#statusline()}]\ %f\ %(\[%M%R%H]%)%=\ %4l,%02c%2V\ %P%*

" Always display a status line at the bottom of the window
set laststatus=2
" set the commandheight
set cmdheight=2

" Insert two spaces after a period with every joining of lines.
" I like this as it makes reading texts easier (for me, at least).
set joinspaces

" showmatch: Show the matching bracket for the last ')'?
set showmatch

" allow tilde (~) to act as an operator -- ~w, etc.
set notildeop

" Java specific stuff
let java_highlight_all=1
let java_highlight_debug=1

let java_ignore_javadoc=1
let java_highlight_functions=1
let java_mark_braces_in_parens_as_errors=1

" highlight strings inside C comments
let c_comment_strings=1

" Highlight search terms...
"
" Switch syntax highlighting on:
"
"   1. if the terminal has colors
"   2. for the last used search pattern.
"
if &t_Co > 2 || has("gui_running")
  syntax on
  set hlsearch
endif
" do incremental searches
set incsearch

set visualbell

" remember some stuff after quiting vim:
" marks, registers, searches, buffer list
set viminfo='20,<50,s10,h,%

" set wildmenu enables a menu at the bottom of the vim/gvim window.
"
" :spe<tab><tab>
"
set wildmenu
" The meaning of "list:longest,full" is so that when you do completion in the
" command line via tab, these events will happen:
"
"   1. (on the first tab) a list of completions will be shown and the command
"       will be completed to the longest common command.
"
"   2. (on second tab) the wildmenu will show up with all the completions
"      that were listed before.
"      "
set wildmode=list:longest,full
" Bash-like filename completion
set wildignore=*.o

" ------------------------------------------------------------------------------
" C O M M A N D S

" switch to directory of current file
command! CD cd %:p:h

" :TOHtml
" Convert this file to HTML
" for the TOhtml command
let html_use_css=1

" pressing < or > will let you indent/unident selected lines
" vnoremap < <gv
" vnoremap > >gv

map ,datetime :let @z=strftime("%d %b %Y %X")<Cr>"zpa
map ,date :let @z=strftime("%d %b %Y")<Cr>"zpa

" Catch trailing whitespace
"
set listchars=tab:>\ ,trail:$
set list

" ------------------------------------------------------------------------------
" K E Y  M A P P I N G S
" --------
"
" normal
" ------
" ctrl-w        save
" ctrl-a        select all
" ctrl-n        show line numbers
" ctrl-p        set list (show tabstops, EOLs, etc.)
" <tab>         increase indent (whole line)
" shift-<tab>   decrease indent (whole line)
"
" visual
" ------
" <tab>         increase indent (whole line)
" shift-<tab>   decrease indent (whole line)
"

" Map ctrl-w to write (save) current buffer.
" must change tty's ctrl-s
map <c-s> :w<CR>
imap <c-s> <c-o><c-w>
imap <c-s> <esc><c-w>

" git-fugitive: https://github.com/tpope/vim-fugitive
"
" Git mode
"
" ctrl-g    :G
"   ctrl-g  :G        (no delay)
"   ctrl-b  :Gblame
"   ctrl-d  :Gdiff
"   ctrl-s  :Gstatus
"   ctrl-c  :Gread    (git checkout -- filename)
"   ctrl-a  :Gwrite   (git add -- filename)
map <c-g> :G
map <c-g><c-g> :G
map <c-g><c-b> :Gblame<CR>
map <c-g><c-d> :Gdiff<CR>
map <c-g><c-s> :Gstatus<CR>
map <c-g><c-c> :Gread<CR>
map <c-g><c-a> :Gwrite<CR>
map <c-g><c-l> :Glog<CR>:copen<CR>

" Select all.
map <c-a> ggVG

" toggle line numbers with ctrl-n
:nmap <C-N> :set invnumber<CR>

" Shortcut to rapidly toggle `set list`
nmap <C-P> :set list!<CR>

" Make tab in visual mode indent
vmap  <tab>     >gv
vmap  <s-tab>   <gv
map   <tab>     v>gv<esc>
map   <s-tab>   v<gv<esc>

let g:tagbar_usearrows = 1
nnoremap <c-l> :TagbarToggle<CR>

" ------------------------------------------------------------------------------
" Colors
"
syntax enable
if has('gui_running')
    " $ port install macvim
    set background=dark
    set lines=120 columns=110
    set guifont=Menlo:h18
else
    set background=dark
endif
colorscheme solarized


" syntastic: syntastic/syntax_checkers/cpp.vim
" in order to also check header files add this to your .vimrc:
" (this usually creates a .gch file in your source directory)
" let g:syntastic_cpp_check_header = 1

